{
	
	"name":"JSON",
	"info":
	{
		"en": "Work with JSON and JPath", 
		"ru": "Работа с JSON и JPath"
	},
	"icon": "json.png",
	"description":"JSON",
	"description_small":
	{
		"en": "JSON", 
		"ru": "JSON"
	},
	"major_version": 1,
	"minor_version": 0,
	"developer_name": "Oyasumi Punpun", 
	"developer_email": "likangt2012@gmail.com", 
	"developer_site": "https://github.com/CheshireCaat",
	"api_version": 1,
	"actions":
	[
		{
			"name":"JsonGetValue",
			"description":
			{
				"en": "Get value",
				"ru": "Получить значение"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_parse_value_interface.js",
			"select": "json_parse_value_select.js",
			"code": 
			[
				{
					"file": "json_parse_value_code.js", 
					"name": "json_parse_value_code"
				}
			]
		},
		{
			"name":"JsonGetKey",
			"description":
			{
				"en": "Get key",
				"ru": "Получить ключ"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_parse_key_interface.js",
			"select": "json_parse_key_select.js",
			"code": 
			[
				{
					"file": "json_parse_key_code.js", 
					"name": "json_parse_key_code"
				}
			]
		},
		{
			"name":"JsonGetAllValues",
			"description":
			{
				"en": "Get all values",
				"ru": "Получить все значения"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_parse_values_interface.js",
			"select": "json_parse_values_select.js",
			"code": 
			[
				{
					"file": "json_parse_values_code.js", 
					"name": "json_parse_values_code"
				}
			]
		},
		{
			"name":"JsonGetAllKeys",
			"description":
			{
				"en": "Get all keys",
				"ru": "Получить все ключи"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_parse_keys_interface.js",
			"select": "json_parse_keys_select.js",
			"code": 
			[
				{
					"file": "json_parse_keys_code.js", 
					"name": "json_parse_keys_code"
				}
			]
		},
		{
			"name":"JsonGetCount",
			"description":
			{
				"en": "Elements count",
				"ru": "Количество элементов"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_get_count_interface.js",
			"select": "json_get_count_select.js",
			"code": 
			[
				{
					"file": "json_get_count_code.js", 
					"name": "json_get_count_code"
				}
			]
		},
		{
			"name":"JsonChangeFormat",
			"description":
			{
				"en": "Change format",
				"ru": "Изменить формат"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_change_format_interface.js",
			"select": "json_change_format_select.js",
			"code": 
			[
				{
					"file": "json_change_format_code.js", 
					"name": "json_change_format_code"
				}
			]
		},
		{
			"name":"JsonCheckFormat",
			"description":
			{
				"en": "Check if string matches JSON",
				"ru": "Подходит ли строка под парсинг JSON"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_check_format_interface.js",
			"select": "json_check_format_select.js",
			"code": 
			[
				{
					"file": "json_check_format_code.js", 
					"name": "json_check_format_code"
				}
			]
		}
	],
	"localize": 
	{
		"Consider an example. Suppose we got a line of the form <span style=\"color:black\">{\"age\":100, \"name\":\"John\", \"messages\": [\"m1\", \"m2\", \"m3\"]}</span> from a particular site. In a normal situation, we will have to write code to get, for example, the first message - <span style=\"color:black\">m1</span>. With JSONPath, we can simply specify the desired path - <span style=\"color:black\">$.messages[0]</span> and get what we needed as a result. If we briefly describe what exactly such a request means, we get the following: we take the root element using the <span style=\"color:black\">$</span> symbol, access the child element <span style=\"color:black\">messages</span> through the dot symbol, and indicate the index of the element we need.":
		{
			"ru":"Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида <span style=\"color:black\">{\"age\":100, \"name\":\"John\", \"messages\": [\"m1\", \"m2\", \"m3\"]}</span>. В обычной ситуации, нам придётся писать код, чтобы получить, например, первое сообщение - <span style=\"color:black\">m1</span>. С помощью JSONPath мы можем просто указать нужный путь - <span style=\"color:black\">$.messages[0]</span> и получить в результате то, что нам было необходимо. Если кратко описать, что именно значит такой запрос, то получится следующее: берём корневой элемент с помощью символа <span style=\"color:black\">$</span>, обращаемся к дочернему элементу <span style=\"color:black\">messages</span> через символ точки, и указываем индекс нужного нам элемента."
		},
		"Please note, if you use the path <span style=\"color:black\">$.messages[*]</span> - the output will be a list of values, but the actions <span style=\"color:black\">Get Value</span> or <span style=\"color:black\">Get Key</span> will return only the first element from the list,i.e. <span style=\"color:black\">m1</span>, not <span style=\"color:black\">[m1, m2, m3]</span>. If you need a list, use the <span style=\"color:black\">Get all values</span> or <span style=\"color:black\">Get all keys</span> actions.":
		{
			"ru":"Обратите внимание, если использовать путь <span style=\"color:black\">$.messages[*]</span> - на выходе получится список значений, но действия <span style=\"color:black\">Получить значение</span> или <span style=\"color:black\">Получить ключ</span> вернут только первый элемент из списка, т.е <span style=\"color:black\">m1</span>, а не <span style=\"color:black\">[m1, m2, m3]</span>. Если вам нужен именно список, используйте действия <span style=\"color:black\">Получить все значения</span> или <span style=\"color:black\">Получить все ключи</span>."
		},
		"In a similar way, we can do the inverse transformation, i.e. make a JSON format string from the object. For example, we have an object with two parameters. One of them is an array of three numbers, the other is a simple string. Let it be student performance data for the subject. After converting, we can get a JSON string of the form like <span style=\"color:black\">{\"name\":\"John\",\"grades\":[5,5,4]}</span>":
		{
			"ru":"Подобным образом мы можем сделать и обратное преобразование, т.е. сделать из объекта строку в формате JSON. Например, у нас есть объект с двумя параметрами. Один из них - это массив из трёх чисел, другой - это обычная строка. Пусть это будет информация об успеваемости студента за предмет. После преобразования, мы получим JSON строку подобного вида - <span style=\"color:black\">{\"name\":\"John\",\"grades\":[5,5,4]}</span>"
		},
		"Remember that this function is required for a simple conversion. You can use other actions with both the object and the string. It is recommended that you use the <span style=\"color:black\">Get value</span> or <span style=\"color:black\">Get all values</span> ​​actions if you want to get specific information about an object or JSON string.":
		{
			"ru":"Помните, что данная функция используется для простого преобразования. Вы можете использовать другие действия как с объектом, так и со строкой. Но всё же рекомендутся сразу обращаться к функциям <span style=\"color:black\">Получить значение</span> или <span style=\"color:black\">Получить все значения</span>, если вы хотите собрать особую информацию об объекте или строке в формате JSON."
		},
		"JSON is a text format for data exchange, serialization (storage) of objects, arrays, numbers, strings, logical values ​​and <span style=\"color:black\">null</span> values. It is based on JavaScript syntax, but still different from it: not every JavaScript code is JSON, and not every JSON is JavaScript code.":
		{
			"ru":"JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения <span style=\"color:black\">null</span>. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript."
		},
		"For example, checking for the string <span style=\"color:black\">{\"name\":\"John\"}</span> will return <span style=\"color:black\">true</span>, because it has a valid JSON format. The string <span style=\"color:black\">\"name\":\"John\"</span> will have an incorrect structure, it does not have curly braces, so the result will be <span style=\"color:black\">false</span>.":
		{
			"ru":"Например, проверка для строки <span style=\"color:black\">{\"name\":\"John\"}</span> вернет <span style=\"color:black\">true</span>, т.к. она имеет валидный формат JSON. Строка <span style=\"color:black\">\"name\":\"John\"</span> будет имеет неверную структуру, у неё отсутствуют фигурные скобки, поэтому результатом будет <span style=\"color:black\">false</span>."
		},
		"For example, changing format of the string <span style=\"color:black\">{\"name\":\"John\"}</span> will return object that contains one property - <span style=\"color:black\">name</span> with value <span style=\"color:black\">John</span>":
		{
			"ru":"Например, при изменении формата строки вида <span style=\"color:black\">{\"name\":\"John\"}</span> будет возвращён объект, содеражий одно свойство - <span style=\"color:black\">name</span> со значением <span style=\"color:black\">John</span>"
		},
		"You can use simple parameter names to get the value you need. For example, having the line from the previous example, you can specify a query of the form <span style=\"color:black\">age</span> as a path and get the value of this property - <span style=\"color:black\">100</span>.":
		{
			"ru":"Вы можете использовать простые названия параметров, чтобы получить необходимое значение. Например, имея строку из предыдущего примера вы можете указать в качестве пути запрос вида <span style=\"color:black\">age</span> и получить значение этого свойства - <span style=\"color:black\">100</span>."
		},
		"Typical examples of using this function are working with the API of a website or, more often in the context of BAS, working with Cookies. In BAS, cookies are presented to the user in JSON format strings. This often causes difficulties. But with JSONPath, you can easily get the data you need.":
		{
			"ru":"Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные."
		},
		"See full documentation and examples <a href=\"#\" onclick=\"BrowserAutomationStudio_OpenUrl('https://cheshirecaat.github.io/BAS.Modules/jpath-documentation-en.html'); return false;\"><span class=\"tr\">here.</span></a>":
		{
			"ru":"Смотрите полную документацию и примеры <a href=\"#\" onclick=\"BrowserAutomationStudio_OpenUrl('https://cheshirecaat.github.io/BAS.Modules/jpath-documentation-ru.html'); return false;\"><span class=\"tr\">здесь.</span></a>"
		},
		"Please note that if you specify as a variable for checking not a string, but a variable of any other type - the result will always be <span style=\"color:black\">false</span>.":
		{
			"ru":"Обратите внимание, если вы укажете в качестве переменной для проверки не строку, а переменную любого другого типа - результатом всегда будет <span style=\"color:black\">false</span>."
		},
		"JSONPath (JPath) is a powerful tool for working with the JSON data type. It is built on the basis of logic, which is very similar to XPath, but has some limitations, because the data type itself is much simpler than Xml.":
		{
			"ru":"JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml."
		},
		"Using this technology, we can quickly get data from JavaScript objects or strings in JSON format. In addition, this greatly simplifies the work, as usually, parsing JSON requires writing code.":
		{
			"ru":"С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код."
		},
		"JSON string or object to format changing. You can specify a valid JSON string here or an object whose type is not simple. Simple types include numbers, boolean values, null value":
		{
			"ru":"JSON строка или объект изменения формата. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null."
		},
		"JSON string or object to parse. You can specify a valid JSON string here or an object whose type is not simple. Simple types include numbers, boolean values, null value.":
		{
			"ru":"JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null."
		},
		"With this action, you can see if you can use the string to parse JSON and retrieve data to avoid possible errors.":
		{
			"ru":"С помощью этого действия вы можете убедиться, можно ли использовать строку для парсинга JSON и получения данных, чтобы избежать возможных ошибок."
		},
		"With this action, you can convert a JSON string to a JavaScript object and vice versa.":
		{
			"ru":"С помощью этого действия вы можете преобразовать строку в формате JSON в объект JavaScript и наоборот."
		},
		"JSONPath query should not be empty. If you want to change the data format, use the 'Change format' action.":
		{
			"ru":"JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие 'Изменить формат'."
		},
		"If the result of the action is a single value, a list containing this value will be returned.":
		{
			"ru":"Если результатом действия будет одно значение, будет возвращён список, содержащий это значение."
		},
		"If the result of the action is a single key, a list containing this key will be returned.":
		{
			"ru":"Если результатом действия будет один ключ, будет возвращён список, содержащий этот ключ."
		},
		"If an error occurs during parsing, an empty string will be returned.":
		{
			"ru":"Если во время парсинга произойдёт ошибка, будет возвращена пустая строка."
		},
		"Check that selected variable is valid JSON string and return the result to a variable.":
		{
			"ru":"Проверить, что выбранная переменная является допустимой строкой JSON и сохранить результат в переменную."
		},	
		"New data format for your variable. You can use only two options - String or JSON.":
		{
			"ru":"Новый формат данных для вашей переменной. Вы можете использовать только два варианта - String или JSON."
		},
		"Variable that stores the result of parsing (All values ​​or an list of one value).":
		{
			"ru":"Переменная, содержащая результат парсинга (Все значения или список, состоящий из одного значения)."
		},
		"Variable that stores the result of parsing (All keys ​​or an list of one key).":
		{
			"ru":"Переменная, содержащая результат парсинга (Все ключи или список, состоящий из одного ключа)."
		},
		"Variable that stores the result of format changing (object or string).":
		{
			"ru":"Переменная, содержащая результат изменения формата (объект или строка)."
		},
		"Variable that stores the result of format checking (true or false).":
		{
			"ru":"Переменная, содержащая результат проверки формата (true или false)."
		},
		"Variable that stores the result of parsing (First value only).":
		{
			"ru":"Переменная, содержащая результат парсинга (Первое подходящее значение)."
		},
		"Variable that stores the result of parsing (First key only).":
		{
			"ru":"Переменная, содержащая результат парсинга (Первый подходящий ключ)."
		},
		"Execute JPath query if needeed and get elements count.":
		{
			"ru":"Выполнить запрос JPath, если необходимо, и получить количество элементов."
		},
		"Execute JPath query and get all matching values.":
		{
			"ru":"Выполнить запрос JPath и получить все подходящие значения."
		},
		"Execute JPath query and get one value (first matching).":
		{
			"ru":"Выполнить запрос JPath и получить одно значение (первое подходящее)."
		},
		"Execute JPath query and get all matching keys.":
		{
			"ru":"Выполнить запрос JPath и получить все подходящие ключи."
		},
		"Execute JPath query and get one key (first matching).":
		{
			"ru":"Выполнить запрос JPath и получить один ключ (первый подходящий)."
		},
		"JSON string or object to change": 
		{
			"ru":"JSON строка или объект для изменения"
		},
		"JSON string or object to parse": 
		{
			"ru":"JSON строка или объект для парсинга"
		},
		"String variable to check":
		{
			"ru":"Строковая переменная для проверки"
		},
		"JSONPath query to parse": 
		{
			"ru":"JSONPath запрос для парсинга"
		},
		"Variable to save":
		{
			"ru":"Переменная, в которую сохранить результат"
		},
		"New data format":
		{
			"ru":"Новый формат данных"
		}
	},
	"engine": 
	[
		"engine.js"
	],
	"browser": [],
	"depends": []	
}
